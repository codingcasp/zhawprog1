1. )  
Die Programmierung mittels zwei Klassen ist hier deutlich besser gewählt. Die Logik der Zeit (Stunden, Minuten) ist klar von der Logik der Applikation selbst getrennt. Somit kann bei der Zweiklassen-L��sung f��r die Abhandlung der Limite eine Methode verwendet werden.
Eine Implementation der Sekunden ist bei der Zweiklassen-Lösung ist auch durch 1 Zeile und ohne Eingriff in die Klasse Nummernanzeige() m��glich. Bei der Einklassen-L��sung muss die Logik selbst erweitert werden.

2. a)
Uhrenanzeige Datenfeld erzeugen. Konstruktor und Methoden Parameter erweitern. Zeitanzeige anpassen
Die Klasse Nummernanzeige musste nicht geändert werden.
2. b)
So ziemlich alles musste umständlich erweitert und geändert werden.
2. c)
Die Einklassen-Lösung ist umständindlicher anzupassen, da wir alle Werte (Stunden, Minuten und Sekunden) einzeln verarbeiten. Bei der Zweiklassen-L��sung hingegen k��nnen wir alle Ausgaben an einer Stelle ver��ndern.
2. d) 
Auslagern = Godlike! Redundanz = Noob!


3. a) 
- Sicher eine Klasse für den Event selbst, die Künstler und die jeweiligen Tickets, da diese aus mehr als einem Wert bestehen und Enhancementpotential aufweisen.
- Im ersten Schritt werden die Tickets im Event selbst fix referenziert (3 fixe Kategorien), idealerweise hier aber mit einem registerTicket und getTicketCategories arbeiten.
- Der Rest ist Geschichte...